/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
/* THIS FILE IS AUTOGENERATED! */
#ifndef __MINIMAL_BPF_SKEL_H__
#define __MINIMAL_BPF_SKEL_H__

#include <stdlib.h>
#include <bpf/bpf.h>
#include <bpf/skel_internal.h>

struct minimal_bpf {
	struct bpf_loader_ctx ctx;
	struct {
		struct bpf_map_desc rodata;
		struct bpf_map_desc bss;
	} maps;
	struct {
		struct bpf_prog_desc handle_tp;
	} progs;
	struct {
		int handle_tp_fd;
	} links;
	struct minimal_bpf__bss {
		int my_pid;
	} *bss;
	struct minimal_bpf__rodata {
	} *rodata;
};

static inline int
minimal_bpf__handle_tp__attach(struct minimal_bpf *skel)
{
	int prog_fd = skel->progs.handle_tp.prog_fd;
	int fd = ((void)prog_fd, 0); /* auto-attach not supported */

	if (fd > 0)
		skel->links.handle_tp_fd = fd;
	return fd;
}

static inline int
minimal_bpf__attach(struct minimal_bpf *skel)
{
	int ret = 0;

	ret = ret < 0 ? ret : minimal_bpf__handle_tp__attach(skel);
	return ret < 0 ? ret : 0;
}

static inline void
minimal_bpf__detach(struct minimal_bpf *skel)
{
	skel_closenz(skel->links.handle_tp_fd);
}
static void
minimal_bpf__destroy(struct minimal_bpf *skel)
{
	if (!skel)
		return;
	minimal_bpf__detach(skel);
	skel_closenz(skel->progs.handle_tp.prog_fd);
	munmap(skel->rodata, 4096);
	skel_closenz(skel->maps.rodata.map_fd);
	munmap(skel->bss, 4096);
	skel_closenz(skel->maps.bss.map_fd);
	free(skel);
}
static inline struct minimal_bpf *
minimal_bpf__open(void)
{
	struct minimal_bpf *skel;

	skel = calloc(sizeof(*skel), 1);
	if (!skel)
		goto cleanup;
	skel->ctx.sz = (void *)&skel->links - (void *)skel;
	skel->rodata =
		mmap(NULL, 4096, PROT_READ | PROT_WRITE,
		     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
	if (skel->rodata == (void *) -1)
		goto cleanup;
	memcpy(skel->rodata, (void *)"\
\x42\x50\x46\x20\x74\x72\x69\x67\x67\x65\x72\x65\x64\x20\x66\x72\x6f\x6d\x20\
\x50\x49\x44\x20\x25\x64\x2e\x0a\0", 28);
	skel->maps.rodata.initial_value = (__u64)(long)skel->rodata;
	skel->bss =
		mmap(NULL, 4096, PROT_READ | PROT_WRITE,
		     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
	if (skel->bss == (void *) -1)
		goto cleanup;
	memcpy(skel->bss, (void *)"\
\0\0\0\0", 4);
	skel->maps.bss.initial_value = (__u64)(long)skel->bss;
	return skel;
cleanup:
	minimal_bpf__destroy(skel);
	return NULL;
}

static inline int
minimal_bpf__load(struct minimal_bpf *skel)
{
	struct bpf_load_and_run_opts opts = {};
	int err;

	opts.ctx = (struct bpf_loader_ctx *)skel;
	opts.data_sz = 1205;
	opts.data = (void *)"\
\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x10\x01\0\0\x10\x01\0\0\x28\x01\0\0\0\0\0\0\0\
\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x03\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\0\
\0\0\x01\x04\0\0\0\x20\0\0\x01\x09\0\0\0\x01\0\0\x0c\x02\0\0\0\xd9\0\0\0\0\0\0\
\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x05\0\0\0\x07\0\0\0\x0d\0\
\0\0\xde\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xf2\0\0\0\0\0\0\x0e\x06\0\0\0\x01\
\0\0\0\xfa\0\0\0\0\0\0\x0e\x03\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x05\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x0a\0\0\0\x07\0\0\0\x1c\0\0\0\x01\x01\0\0\0\0\0\x0e\x0b\
\0\0\0\0\0\0\0\x13\x01\0\0\x01\0\0\x0f\x04\0\0\0\x09\0\0\0\0\0\0\0\x04\0\0\0\
\x18\x01\0\0\x01\0\0\x0f\x1c\0\0\0\x0c\0\0\0\0\0\0\0\x1c\0\0\0\x20\x01\0\0\x01\
\0\0\x0f\x0d\0\0\0\x08\0\0\0\0\0\0\0\x0d\0\0\0\0\x63\x74\x78\0\x69\x6e\x74\0\
\x68\x61\x6e\x64\x6c\x65\x5f\x74\x70\0\x74\x70\x2f\x73\x79\x73\x63\x61\x6c\x6c\
\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x77\x72\x69\x74\x65\0\x2f\x68\
\x6f\x6d\x65\x2f\x61\x64\x61\x6d\x2f\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\x6f\
\x74\x73\x74\x72\x61\x70\x2f\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x63\x2f\x6d\
\x69\x6e\x69\x6d\x61\x6c\x2e\x62\x70\x66\x2e\x63\0\x09\x69\x6e\x74\x20\x70\x69\
\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\
\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\x09\
\x69\x66\x20\x28\x70\x69\x64\x20\x21\x3d\x20\x6d\x79\x5f\x70\x69\x64\x29\0\x09\
\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x42\x50\x46\x20\x74\x72\x69\
\x67\x67\x65\x72\x65\x64\x20\x66\x72\x6f\x6d\x20\x50\x49\x44\x20\x25\x64\x2e\
\x5c\x6e\x22\x2c\x20\x70\x69\x64\x29\x3b\0\x7d\0\x63\x68\x61\x72\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x4c\x49\x43\
\x45\x4e\x53\x45\0\x6d\x79\x5f\x70\x69\x64\0\x68\x61\x6e\x64\x6c\x65\x5f\x74\
\x70\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x62\x73\x73\0\x2e\x72\x6f\x64\x61\
\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\
\x02\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x1c\0\0\0\x01\0\0\0\x80\x04\0\0\0\
\0\0\0\0\0\0\0\x6d\x69\x6e\x69\x6d\x61\x6c\x5f\x2e\x72\x6f\x64\x61\x74\x61\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\x42\x50\x46\x20\x74\x72\x69\x67\x67\
\x65\x72\x65\x64\x20\x66\x72\x6f\x6d\x20\x50\x49\x44\x20\x25\x64\x2e\x0a\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x02\0\0\0\x04\0\0\0\x04\0\0\0\x01\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\x6d\x69\x6e\
\x69\x6d\x61\x6c\x5f\x2e\x62\x73\x73\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0d\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\x4c\0\x85\0\0\0\x0e\0\0\
\0\x77\0\0\0\x20\0\0\0\x18\x61\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\0\
\0\x5d\x01\x05\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1c\0\
\0\0\xbf\x03\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\x2f\0\0\0\x64\0\0\0\x0c\x34\0\0\x01\0\0\0\x2f\0\0\
\0\x64\0\0\0\x27\x34\0\0\x02\0\0\0\x2f\0\0\0\x91\0\0\0\x0d\x3c\0\0\x05\0\0\0\
\x2f\0\0\0\x91\0\0\0\x06\x3c\0\0\x06\0\0\0\x2f\0\0\0\xa5\0\0\0\x02\x48\0\0\x0b\
\0\0\0\x2f\0\0\0\xd7\0\0\0\x01\x54\0\0\x05\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\x61\x6e\x64\
\x6c\x65\x5f\x74\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0";
	opts.insns_sz = 3904;
	opts.insns = (void *)"\
\xbf\x16\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\x78\xfe\xff\xff\xb7\x02\0\
\0\x88\x01\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\x05\0\x28\x01\0\0\0\0\
\x61\xa1\x78\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x7c\
\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x80\xfe\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x84\xfe\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x88\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\x8c\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\x90\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\x94\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x98\
\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x9c\xfe\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xa0\xfe\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xa4\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xa8\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xac\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xb0\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xb4\
\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xb8\xfe\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xbc\xfe\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xc0\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xc4\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xc8\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xcc\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xd0\
\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xd4\xfe\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xd8\xfe\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xdc\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xe0\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xe4\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xe8\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xec\
\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xf0\xfe\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xf4\xfe\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xf8\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xfc\xfe\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\0\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\
\xa1\x04\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x08\xff\
\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x0c\xff\0\0\0\0\xd5\
\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x10\xff\0\0\0\0\xd5\x01\x01\0\0\
\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x14\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\
\0\0\xa8\0\0\0\x61\xa1\x18\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\
\0\x61\xa1\x1c\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\
\x20\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x24\xff\0\0\
\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x28\xff\0\0\0\0\xd5\x01\
\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x2c\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\
\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x30\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\x34\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\x38\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x3c\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x40\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x44\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x48\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\x4c\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\x50\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\x54\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x58\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x5c\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x60\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x64\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\x68\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\x6c\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\x70\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x74\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x78\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x7c\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x80\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\x84\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\x88\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\x8c\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x90\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x94\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x98\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x9c\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xa0\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xa4\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xa8\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xac\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xb0\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xb4\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xb8\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xbc\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xc0\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xc4\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xc8\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xcc\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xd0\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xd4\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xd8\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xdc\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xe0\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xe4\
\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xe8\xff\0\0\0\0\
\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xec\xff\0\0\0\0\xd5\x01\x01\
\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\xf0\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\
\x85\0\0\0\xa8\0\0\0\x61\xa1\xf4\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\
\xa8\0\0\0\x61\xa1\xf8\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x61\xa1\xfc\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\xbf\x70\0\0\
\0\0\0\0\x95\0\0\0\0\0\0\0\x61\x60\x08\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\x68\x02\0\0\x63\x01\0\0\0\0\0\0\x61\x60\x0c\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\
\0\0\x64\x02\0\0\x63\x01\0\0\0\0\0\0\x79\x60\x10\0\0\0\0\0\x18\x61\0\0\0\0\0\0\
\0\0\0\0\x58\x02\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x18\x61\0\0\0\0\0\0\0\0\0\0\x50\x02\0\0\x7b\x01\0\0\0\0\0\0\xb7\x01\0\0\x12\0\
\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\x50\x02\0\0\xb7\x03\0\0\x1c\0\0\0\x85\0\0\0\
\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\xc0\xfe\0\0\0\0\x63\x7a\x78\xfe\0\0\0\0\
\x61\xa0\x78\xfe\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x9c\x02\0\0\x63\x01\0\0\0\
\0\0\0\x61\x60\x20\0\0\0\0\0\x15\0\x03\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\x78\x02\0\0\x63\x01\0\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\
\0\x6c\x02\0\0\xb7\x03\0\0\x40\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\
\xc5\x07\xaf\xfe\0\0\0\0\x63\x7a\x7c\xfe\0\0\0\0\x79\x63\x18\0\0\0\0\0\x15\x03\
\x04\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xac\x02\0\0\xb7\x02\0\0\x1c\0\0\0\
\x85\0\0\0\x94\0\0\0\x61\xa0\x7c\xfe\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xcc\
\x02\0\0\x63\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xc8\x02\0\0\x18\x61\0\
\0\0\0\0\0\0\0\0\0\xd4\x02\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\
\xac\x02\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xdc\x02\0\0\x7b\x01\0\0\0\0\0\0\xb7\
\x01\0\0\x02\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\xcc\x02\0\0\xb7\x03\0\0\x20\0\0\
\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\x93\xfe\0\0\0\0\x61\xa0\x7c\
\xfe\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xec\x02\0\0\x63\x01\0\0\0\0\0\0\xb7\
\x01\0\0\x16\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\xec\x02\0\0\xb7\x03\0\0\x04\0\0\
\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\x88\xfe\0\0\0\0\x61\xa0\x78\
\xfe\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x20\x03\0\0\x63\x01\0\0\0\0\0\0\x61\
\x60\x30\0\0\0\0\0\x15\0\x03\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xfc\x02\0\0\
\x63\x01\0\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\xf0\x02\0\
\0\xb7\x03\0\0\x40\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\x78\
\xfe\0\0\0\0\x63\x7a\x80\xfe\0\0\0\0\x79\x63\x28\0\0\0\0\0\x15\x03\x04\0\0\0\0\
\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x30\x03\0\0\xb7\x02\0\0\x04\0\0\0\x85\0\0\0\x94\
\0\0\0\x61\xa0\x80\xfe\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x38\x03\0\0\x63\x01\
\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x34\x03\0\0\x18\x61\0\0\0\0\0\0\0\0\0\
\0\x40\x03\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x30\x03\0\0\x18\
\x61\0\0\0\0\0\0\0\0\0\0\x48\x03\0\0\x7b\x01\0\0\0\0\0\0\xb7\x01\0\0\x02\0\0\0\
\x18\x62\0\0\0\0\0\0\0\0\0\0\x38\x03\0\0\xb7\x03\0\0\x20\0\0\0\x85\0\0\0\xa6\0\
\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\x5c\xfe\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\
\x58\x03\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x45\x04\0\0\x7b\x01\0\0\0\0\0\0\x18\
\x60\0\0\0\0\0\0\0\0\0\0\x65\x03\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x3d\x04\0\0\
\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xcd\x03\0\0\x18\x61\0\0\0\0\0\
\0\0\0\0\0\x85\x04\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xd5\x03\
\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x95\x04\0\0\x7b\x01\0\0\0\0\0\0\xbf\xa0\0\0\0\
\0\0\0\x07\0\0\0\x7c\xfe\xff\xff\x18\x61\0\0\0\0\0\0\0\0\0\0\xad\x04\0\0\x7b\
\x01\0\0\0\0\0\0\x61\x60\x08\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x4d\x04\0\0\
\x63\x01\0\0\0\0\0\0\x61\x60\x0c\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x51\x04\
\0\0\x63\x01\0\0\0\0\0\0\x79\x60\x10\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x55\
\x04\0\0\x7b\x01\0\0\0\0\0\0\x61\xa0\x78\xfe\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\
\0\x7d\x04\0\0\x63\x01\0\0\0\0\0\0\xb7\x01\0\0\x05\0\0\0\x18\x62\0\0\0\0\0\0\0\
\0\0\0\x35\x04\0\0\xb7\x03\0\0\x80\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\
\0\xc5\x07\x2c\xfe\0\0\0\0\x63\x7a\x7c\xff\0\0\0\0\x61\xa1\x78\xfe\0\0\0\0\xd5\
\x01\x02\0\0\0\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa0\x7c\xff\0\0\
\0\0\x63\x06\x38\0\0\0\0\0\x61\xa0\x7c\xfe\0\0\0\0\x63\x06\x18\0\0\0\0\0\x61\
\xa0\x80\xfe\0\0\0\0\x63\x06\x28\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0";
	err = bpf_load_and_run(&opts);
	if (err < 0)
		return err;
	skel->rodata =
		mmap(skel->rodata, 4096, PROT_READ, MAP_SHARED | MAP_FIXED,
			skel->maps.rodata.map_fd, 0);
	skel->bss =
		mmap(skel->bss, 4096, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_FIXED,
			skel->maps.bss.map_fd, 0);
	return 0;
}

static inline struct minimal_bpf *
minimal_bpf__open_and_load(void)
{
	struct minimal_bpf *skel;

	skel = minimal_bpf__open();
	if (!skel)
		return NULL;
	if (minimal_bpf__load(skel)) {
		minimal_bpf__destroy(skel);
		return NULL;
	}
	return skel;
}

#endif /* __MINIMAL_BPF_SKEL_H__ */
